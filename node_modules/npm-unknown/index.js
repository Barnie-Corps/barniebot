const bcrypt = require('bcryptjs');
const fetch = require('node-fetch');
const print = (message, timeout) => {
	if (!message) throw new Error('You must specify the message\'s parameter.');
	if (timeout) {
		if (isNaN(timeout)) throw new Error('Time Out must be a number.');
		const time = Number(timeout);
		setTimeout(function() {
			console.log(message);
		}, time);
	}
	else {
		console.log(message);
	}
};
const encrypt = (text, times) => {
	if (!text) throw new Error('You must specify the text to encript.');
	if (!times) throw new Error('You must specify how many times the text will be encrypted.');
	if (isNaN(times)) throw new Error('The times must be a number.');
	return bcrypt.hashSync(text, bcrypt.genSaltSync(Number(times)));
};
const compareSync = (firstText, secondText) => {
	if (!firstText) throw new Error('You must specify the first text parameter.');
	if (!secondText) throw new Error('You must specify the second text parameter to compare.');
	return bcrypt.compareSync(firstText, secondText);
};
const compare = async (firstText, secondText) => {
	if (!firstText) throw new Error('You must specify the first text parameter.');
	if (!secondText) throw new Error('You must specify the second text parameter to compare.');
	return await bcrypt.compare(firstText, secondText);
};
const store = async (key, value, password) => {
  if (!key) throw new Error('You must specify the key parameter.');
  if (!value) throw new Error('You must specify the value parameter.');
  if (!password) throw new Error('You must specify the password parameter');
  fetch(`https://unknownapi.mrpbs.repl.co/store?key=${key}&value=${value}&password=${password}`).then(async res => {
    const ris = await res.json();
    if (ris.response === 'taken') throw new Error('The key has already been taken');
  });
}
module.exports = {
	print,
	encrypt,
	compare,
	compareSync,
  store,
};